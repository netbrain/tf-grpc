// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow_serving/servables/hashmap/hashmap_source_adapter.proto

package tensorflow_serving

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The format used by the file containing a serialized hashmap.
type HashmapSourceAdapterConfig_Format int32

const (
	// A simple kind of CSV text file of the form:
	//  key0,value0\n
	//  key1,value1\n
	//  ...
	HashmapSourceAdapterConfig_SIMPLE_CSV HashmapSourceAdapterConfig_Format = 0
)

var HashmapSourceAdapterConfig_Format_name = map[int32]string{
	0: "SIMPLE_CSV",
}

var HashmapSourceAdapterConfig_Format_value = map[string]int32{
	"SIMPLE_CSV": 0,
}

func (x HashmapSourceAdapterConfig_Format) String() string {
	return proto.EnumName(HashmapSourceAdapterConfig_Format_name, int32(x))
}

func (HashmapSourceAdapterConfig_Format) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9ff81e5cdf9aad70, []int{0, 0}
}

// Config proto for HashmapSourceAdapter.
type HashmapSourceAdapterConfig struct {
	Format               HashmapSourceAdapterConfig_Format `protobuf:"varint,1,opt,name=format,proto3,enum=tensorflow.serving.HashmapSourceAdapterConfig_Format" json:"format,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *HashmapSourceAdapterConfig) Reset()         { *m = HashmapSourceAdapterConfig{} }
func (m *HashmapSourceAdapterConfig) String() string { return proto.CompactTextString(m) }
func (*HashmapSourceAdapterConfig) ProtoMessage()    {}
func (*HashmapSourceAdapterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ff81e5cdf9aad70, []int{0}
}

func (m *HashmapSourceAdapterConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HashmapSourceAdapterConfig.Unmarshal(m, b)
}
func (m *HashmapSourceAdapterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HashmapSourceAdapterConfig.Marshal(b, m, deterministic)
}
func (m *HashmapSourceAdapterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashmapSourceAdapterConfig.Merge(m, src)
}
func (m *HashmapSourceAdapterConfig) XXX_Size() int {
	return xxx_messageInfo_HashmapSourceAdapterConfig.Size(m)
}
func (m *HashmapSourceAdapterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_HashmapSourceAdapterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_HashmapSourceAdapterConfig proto.InternalMessageInfo

func (m *HashmapSourceAdapterConfig) GetFormat() HashmapSourceAdapterConfig_Format {
	if m != nil {
		return m.Format
	}
	return HashmapSourceAdapterConfig_SIMPLE_CSV
}

func init() {
	proto.RegisterEnum("tensorflow.serving.HashmapSourceAdapterConfig_Format", HashmapSourceAdapterConfig_Format_name, HashmapSourceAdapterConfig_Format_value)
	proto.RegisterType((*HashmapSourceAdapterConfig)(nil), "tensorflow.serving.HashmapSourceAdapterConfig")
}

func init() {
	proto.RegisterFile("tensorflow_serving/servables/hashmap/hashmap_source_adapter.proto", fileDescriptor_9ff81e5cdf9aad70)
}

var fileDescriptor_9ff81e5cdf9aad70 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0x2c, 0x49, 0xcd, 0x2b,
	0xce, 0x2f, 0x4a, 0xcb, 0xc9, 0x2f, 0x8f, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0xcc, 0x4b, 0xd7, 0x07,
	0xd1, 0x89, 0x49, 0x39, 0xa9, 0xc5, 0xfa, 0x19, 0x89, 0xc5, 0x19, 0xb9, 0x89, 0x05, 0x30, 0x3a,
	0xbe, 0x38, 0xbf, 0xb4, 0x28, 0x39, 0x35, 0x3e, 0x31, 0x25, 0xb1, 0xa0, 0x24, 0xb5, 0x48, 0xaf,
	0xa0, 0x28, 0xbf, 0x24, 0x5f, 0x48, 0x08, 0x61, 0x84, 0x1e, 0xd4, 0x08, 0xa5, 0x56, 0x46, 0x2e,
	0x29, 0x0f, 0x88, 0xa6, 0x60, 0xb0, 0x1e, 0x47, 0x88, 0x16, 0xe7, 0xfc, 0xbc, 0xb4, 0xcc, 0x74,
	0x21, 0x5f, 0x2e, 0xb6, 0xb4, 0xfc, 0xa2, 0xdc, 0xc4, 0x12, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x3e,
	0x23, 0x53, 0x3d, 0x4c, 0x33, 0xf4, 0x70, 0xeb, 0xd7, 0x73, 0x03, 0x6b, 0x0e, 0x82, 0x1a, 0xa2,
	0x24, 0xc1, 0xc5, 0x06, 0x11, 0x11, 0xe2, 0xe3, 0xe2, 0x0a, 0xf6, 0xf4, 0x0d, 0xf0, 0x71, 0x8d,
	0x77, 0x0e, 0x0e, 0x13, 0x60, 0x70, 0xb2, 0x8e, 0xb2, 0x4c, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2,
	0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0x4b, 0x2d, 0x49, 0x2a, 0x4a, 0xcc, 0xcc, 0xd3, 0x2f, 0x49, 0xd3,
	0x4d, 0x2f, 0x2a, 0x48, 0xd6, 0x4f, 0xcf, 0xd7, 0x87, 0x79, 0x1a, 0x33, 0x1c, 0x92, 0xd8, 0xc0,
	0xfe, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x08, 0xb7, 0x9a, 0x27, 0x24, 0x01, 0x00, 0x00,
}
