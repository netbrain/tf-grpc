// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/core/debug/debug_service.proto

package debug

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	framework "github.com/netbrain/tf-grpc/go/tensorflow/tensorflow/go/core/framework"
	profiler "github.com/netbrain/tf-grpc/go/tensorflow/tensorflow/go/core/profiler"
	protobuf "github.com/netbrain/tf-grpc/go/tensorflow/tensorflow/go/core/protobuf"
	util "github.com/netbrain/tf-grpc/go/tensorflow/tensorflow/go/core/util"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EventReply_DebugOpStateChange_State int32

const (
	EventReply_DebugOpStateChange_STATE_UNSPECIFIED EventReply_DebugOpStateChange_State = 0
	EventReply_DebugOpStateChange_DISABLED          EventReply_DebugOpStateChange_State = 1
	EventReply_DebugOpStateChange_READ_ONLY         EventReply_DebugOpStateChange_State = 2
	EventReply_DebugOpStateChange_READ_WRITE        EventReply_DebugOpStateChange_State = 3
)

var EventReply_DebugOpStateChange_State_name = map[int32]string{
	0: "STATE_UNSPECIFIED",
	1: "DISABLED",
	2: "READ_ONLY",
	3: "READ_WRITE",
}

var EventReply_DebugOpStateChange_State_value = map[string]int32{
	"STATE_UNSPECIFIED": 0,
	"DISABLED":          1,
	"READ_ONLY":         2,
	"READ_WRITE":        3,
}

func (x EventReply_DebugOpStateChange_State) String() string {
	return proto.EnumName(EventReply_DebugOpStateChange_State_name, int32(x))
}

func (EventReply_DebugOpStateChange_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f7c954ada9cef18d, []int{0, 0, 0}
}

type CallTraceback_CallType int32

const (
	CallTraceback_UNSPECIFIED     CallTraceback_CallType = 0
	CallTraceback_GRAPH_EXECUTION CallTraceback_CallType = 1
	CallTraceback_EAGER_EXECUTION CallTraceback_CallType = 2
)

var CallTraceback_CallType_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "GRAPH_EXECUTION",
	2: "EAGER_EXECUTION",
}

var CallTraceback_CallType_value = map[string]int32{
	"UNSPECIFIED":     0,
	"GRAPH_EXECUTION": 1,
	"EAGER_EXECUTION": 2,
}

func (x CallTraceback_CallType) String() string {
	return proto.EnumName(CallTraceback_CallType_name, int32(x))
}

func (CallTraceback_CallType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f7c954ada9cef18d, []int{1, 0}
}

// Reply message from EventListener to the client, i.e., to the source of the
// Event protocol buffers, e.g., debug ops inserted by a debugged runtime to a
// TensorFlow graph being executed.
type EventReply struct {
	DebugOpStateChanges []*EventReply_DebugOpStateChange `protobuf:"bytes,1,rep,name=debug_op_state_changes,json=debugOpStateChanges,proto3" json:"debug_op_state_changes,omitempty"`
	// New tensor value to override the current tensor value with.
	Tensor               *framework.TensorProto `protobuf:"bytes,2,opt,name=tensor,proto3" json:"tensor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *EventReply) Reset()         { *m = EventReply{} }
func (m *EventReply) String() string { return proto.CompactTextString(m) }
func (*EventReply) ProtoMessage()    {}
func (*EventReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7c954ada9cef18d, []int{0}
}

func (m *EventReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventReply.Unmarshal(m, b)
}
func (m *EventReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventReply.Marshal(b, m, deterministic)
}
func (m *EventReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventReply.Merge(m, src)
}
func (m *EventReply) XXX_Size() int {
	return xxx_messageInfo_EventReply.Size(m)
}
func (m *EventReply) XXX_DiscardUnknown() {
	xxx_messageInfo_EventReply.DiscardUnknown(m)
}

var xxx_messageInfo_EventReply proto.InternalMessageInfo

func (m *EventReply) GetDebugOpStateChanges() []*EventReply_DebugOpStateChange {
	if m != nil {
		return m.DebugOpStateChanges
	}
	return nil
}

func (m *EventReply) GetTensor() *framework.TensorProto {
	if m != nil {
		return m.Tensor
	}
	return nil
}

type EventReply_DebugOpStateChange struct {
	State                EventReply_DebugOpStateChange_State `protobuf:"varint,1,opt,name=state,proto3,enum=tensorflow.EventReply_DebugOpStateChange_State" json:"state,omitempty"`
	NodeName             string                              `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	OutputSlot           int32                               `protobuf:"varint,3,opt,name=output_slot,json=outputSlot,proto3" json:"output_slot,omitempty"`
	DebugOp              string                              `protobuf:"bytes,4,opt,name=debug_op,json=debugOp,proto3" json:"debug_op,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *EventReply_DebugOpStateChange) Reset()         { *m = EventReply_DebugOpStateChange{} }
func (m *EventReply_DebugOpStateChange) String() string { return proto.CompactTextString(m) }
func (*EventReply_DebugOpStateChange) ProtoMessage()    {}
func (*EventReply_DebugOpStateChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7c954ada9cef18d, []int{0, 0}
}

func (m *EventReply_DebugOpStateChange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventReply_DebugOpStateChange.Unmarshal(m, b)
}
func (m *EventReply_DebugOpStateChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventReply_DebugOpStateChange.Marshal(b, m, deterministic)
}
func (m *EventReply_DebugOpStateChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventReply_DebugOpStateChange.Merge(m, src)
}
func (m *EventReply_DebugOpStateChange) XXX_Size() int {
	return xxx_messageInfo_EventReply_DebugOpStateChange.Size(m)
}
func (m *EventReply_DebugOpStateChange) XXX_DiscardUnknown() {
	xxx_messageInfo_EventReply_DebugOpStateChange.DiscardUnknown(m)
}

var xxx_messageInfo_EventReply_DebugOpStateChange proto.InternalMessageInfo

func (m *EventReply_DebugOpStateChange) GetState() EventReply_DebugOpStateChange_State {
	if m != nil {
		return m.State
	}
	return EventReply_DebugOpStateChange_STATE_UNSPECIFIED
}

func (m *EventReply_DebugOpStateChange) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *EventReply_DebugOpStateChange) GetOutputSlot() int32 {
	if m != nil {
		return m.OutputSlot
	}
	return 0
}

func (m *EventReply_DebugOpStateChange) GetDebugOp() string {
	if m != nil {
		return m.DebugOp
	}
	return ""
}

// Data on the traceback of a debugged call, e.g., a Session.run() call, or the
// execution of an eager operation.
type CallTraceback struct {
	CallType CallTraceback_CallType `protobuf:"varint,1,opt,name=call_type,json=callType,proto3,enum=tensorflow.CallTraceback_CallType" json:"call_type,omitempty"`
	// A key for the call. For example, for graph execution, this is a key
	// consisting of the names of the fed and fetched tensors.
	CallKey string `protobuf:"bytes,2,opt,name=call_key,json=callKey,proto3" json:"call_key,omitempty"`
	// Traceback stack for the origin of the call event.
	// For graph execution, this is the stack of the Session.run() call.
	// For eager execution, this is the stack of the Python line that invokes
	// the execution of the eager op.
	OriginStack *profiler.CodeDef `protobuf:"bytes,3,opt,name=origin_stack,json=originStack,proto3" json:"origin_stack,omitempty"`
	// Keeps track of the mapping from integer IDs in `origin_stack` to actual
	// string values (e.g., file paths, function names).
	OriginIdToString map[int64]string `protobuf:"bytes,4,rep,name=origin_id_to_string,json=originIdToString,proto3" json:"origin_id_to_string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Traceback for the graph (if any) involved in the call.
	GraphTraceback *profiler.OpLogProto `protobuf:"bytes,5,opt,name=graph_traceback,json=graphTraceback,proto3" json:"graph_traceback,omitempty"`
	// Version of the graph in `graph_traceback` (if any).
	GraphVersion         int64    `protobuf:"varint,6,opt,name=graph_version,json=graphVersion,proto3" json:"graph_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CallTraceback) Reset()         { *m = CallTraceback{} }
func (m *CallTraceback) String() string { return proto.CompactTextString(m) }
func (*CallTraceback) ProtoMessage()    {}
func (*CallTraceback) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7c954ada9cef18d, []int{1}
}

func (m *CallTraceback) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CallTraceback.Unmarshal(m, b)
}
func (m *CallTraceback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CallTraceback.Marshal(b, m, deterministic)
}
func (m *CallTraceback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallTraceback.Merge(m, src)
}
func (m *CallTraceback) XXX_Size() int {
	return xxx_messageInfo_CallTraceback.Size(m)
}
func (m *CallTraceback) XXX_DiscardUnknown() {
	xxx_messageInfo_CallTraceback.DiscardUnknown(m)
}

var xxx_messageInfo_CallTraceback proto.InternalMessageInfo

func (m *CallTraceback) GetCallType() CallTraceback_CallType {
	if m != nil {
		return m.CallType
	}
	return CallTraceback_UNSPECIFIED
}

func (m *CallTraceback) GetCallKey() string {
	if m != nil {
		return m.CallKey
	}
	return ""
}

func (m *CallTraceback) GetOriginStack() *profiler.CodeDef {
	if m != nil {
		return m.OriginStack
	}
	return nil
}

func (m *CallTraceback) GetOriginIdToString() map[int64]string {
	if m != nil {
		return m.OriginIdToString
	}
	return nil
}

func (m *CallTraceback) GetGraphTraceback() *profiler.OpLogProto {
	if m != nil {
		return m.GraphTraceback
	}
	return nil
}

func (m *CallTraceback) GetGraphVersion() int64 {
	if m != nil {
		return m.GraphVersion
	}
	return 0
}

func init() {
	proto.RegisterEnum("tensorflow.EventReply_DebugOpStateChange_State", EventReply_DebugOpStateChange_State_name, EventReply_DebugOpStateChange_State_value)
	proto.RegisterEnum("tensorflow.CallTraceback_CallType", CallTraceback_CallType_name, CallTraceback_CallType_value)
	proto.RegisterType((*EventReply)(nil), "tensorflow.EventReply")
	proto.RegisterType((*EventReply_DebugOpStateChange)(nil), "tensorflow.EventReply.DebugOpStateChange")
	proto.RegisterType((*CallTraceback)(nil), "tensorflow.CallTraceback")
	proto.RegisterMapType((map[int64]string)(nil), "tensorflow.CallTraceback.OriginIdToStringEntry")
}

func init() {
	proto.RegisterFile("tensorflow/core/debug/debug_service.proto", fileDescriptor_f7c954ada9cef18d)
}

var fileDescriptor_f7c954ada9cef18d = []byte{
	// 735 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x5d, 0x6f, 0xda, 0x48,
	0x14, 0x5d, 0x43, 0x48, 0xe0, 0x12, 0x3e, 0x32, 0xd9, 0x64, 0x1d, 0x56, 0xab, 0x20, 0x76, 0xb5,
	0x22, 0x0f, 0x8b, 0x57, 0xec, 0xcb, 0xaa, 0x55, 0x55, 0x11, 0x70, 0x52, 0x1a, 0x04, 0x91, 0x4d,
	0xfa, 0xf5, 0x10, 0xcb, 0x98, 0xc1, 0xb1, 0x30, 0x1e, 0x6b, 0x3c, 0x26, 0xe2, 0xb1, 0xea, 0x2f,
	0xe9, 0x0f, 0xeb, 0x7f, 0xa9, 0x66, 0x06, 0x8a, 0x13, 0x40, 0xea, 0x4b, 0x74, 0xef, 0xc9, 0x39,
	0x87, 0x33, 0xd7, 0x77, 0x06, 0x2e, 0x18, 0x0e, 0x22, 0x42, 0x27, 0x3e, 0x79, 0xd4, 0x1c, 0x42,
	0xb1, 0x36, 0xc6, 0xa3, 0xd8, 0x95, 0x7f, 0xad, 0x08, 0xd3, 0xb9, 0xe7, 0xe0, 0x46, 0x48, 0x09,
	0x23, 0x08, 0xd6, 0xd4, 0xca, 0xdf, 0xcf, 0x65, 0x13, 0x6a, 0xcf, 0xf0, 0x23, 0xa1, 0x53, 0x4d,
	0xfe, 0x47, 0x6a, 0x2a, 0x1b, 0xf6, 0x21, 0x25, 0x13, 0xcf, 0xc7, 0x54, 0x63, 0x13, 0x5e, 0x5a,
	0x3e, 0x71, 0x97, 0xd4, 0xbf, 0xb6, 0x50, 0x19, 0x19, 0xc5, 0x13, 0x19, 0x66, 0xc9, 0xaa, 0x3e,
	0x67, 0xc5, 0xcc, 0xf3, 0x35, 0x3c, 0xc7, 0x01, 0x93, 0x8c, 0xda, 0xd7, 0x34, 0x80, 0xce, 0x7b,
	0x03, 0x87, 0xfe, 0x02, 0xdd, 0xc3, 0xa9, 0x3c, 0x0c, 0x09, 0xad, 0x88, 0xd9, 0x0c, 0x5b, 0xce,
	0x83, 0x1d, 0xb8, 0x38, 0x52, 0x95, 0x6a, 0xba, 0x9e, 0x6f, 0x5e, 0x34, 0xd6, 0x8e, 0x8d, 0xb5,
	0xae, 0xd1, 0xe1, 0xa2, 0x41, 0x68, 0x72, 0x49, 0x5b, 0x28, 0x8c, 0xe3, 0xf1, 0x06, 0x16, 0x21,
	0x0d, 0xf6, 0xa5, 0x81, 0x9a, 0xaa, 0x2a, 0xf5, 0x7c, 0xf3, 0xb7, 0xa4, 0xdf, 0x50, 0x94, 0xb7,
	0x3c, 0x97, 0xb1, 0xa4, 0x55, 0x3e, 0xa7, 0x00, 0x6d, 0x9a, 0x23, 0x1d, 0x32, 0x22, 0x9e, 0xaa,
	0x54, 0x95, 0x7a, 0xb1, 0xa9, 0xfd, 0x74, 0xac, 0x86, 0xa8, 0x0d, 0xa9, 0x46, 0xbf, 0x43, 0x2e,
	0x20, 0x63, 0x6c, 0x05, 0xf6, 0x0c, 0x8b, 0x44, 0x39, 0x23, 0xcb, 0x81, 0xbe, 0x3d, 0xc3, 0xe8,
	0x1c, 0xf2, 0x24, 0x66, 0x61, 0xcc, 0xac, 0xc8, 0x27, 0x4c, 0x4d, 0x57, 0x95, 0x7a, 0xc6, 0x00,
	0x09, 0x99, 0x3e, 0x61, 0xe8, 0x0c, 0xb2, 0xab, 0x61, 0xa9, 0x7b, 0x42, 0x7c, 0xb0, 0x3c, 0x73,
	0xed, 0x06, 0x32, 0xe2, 0x87, 0xd0, 0x09, 0x1c, 0x99, 0xc3, 0xd6, 0x50, 0xb7, 0xee, 0xfa, 0xe6,
	0xad, 0xde, 0xee, 0x5e, 0x75, 0xf5, 0x4e, 0xf9, 0x17, 0x74, 0x08, 0xd9, 0x4e, 0xd7, 0x6c, 0x5d,
	0xf6, 0xf4, 0x4e, 0x59, 0x41, 0x05, 0xc8, 0x19, 0x7a, 0xab, 0x63, 0x0d, 0xfa, 0xbd, 0x8f, 0xe5,
	0x14, 0x2a, 0x02, 0x88, 0xf6, 0xbd, 0xd1, 0x1d, 0xea, 0xe5, 0x74, 0xed, 0xcb, 0x1e, 0x14, 0xda,
	0xb6, 0xef, 0x0f, 0xa9, 0xed, 0xe0, 0x91, 0xed, 0x4c, 0xd1, 0x6b, 0xc8, 0x39, 0xb6, 0xef, 0x5b,
	0x6c, 0x11, 0xae, 0x46, 0x50, 0x4b, 0x8e, 0xe0, 0x09, 0x5b, 0x76, 0x8b, 0x10, 0x1b, 0x59, 0x67,
	0x59, 0xf1, 0xe8, 0xc2, 0x60, 0x8a, 0x17, 0xcb, 0x73, 0x1f, 0xf0, 0xfe, 0x06, 0x2f, 0xd0, 0x2b,
	0x38, 0x24, 0xd4, 0x73, 0xbd, 0x80, 0x2f, 0x80, 0x33, 0x15, 0xe7, 0xce, 0x37, 0x2b, 0x49, 0x7b,
	0xb9, 0x8d, 0x8d, 0x36, 0x19, 0xe3, 0x0e, 0x9e, 0x18, 0x79, 0xc9, 0x37, 0x39, 0x1d, 0xdd, 0xc3,
	0xf1, 0x52, 0xee, 0x8d, 0x2d, 0x46, 0xac, 0x88, 0x51, 0x2f, 0x70, 0xd5, 0x3d, 0xb1, 0x3e, 0xda,
	0xee, 0x90, 0x03, 0x21, 0xea, 0x8e, 0x87, 0xc4, 0x14, 0x0a, 0x3d, 0x60, 0x74, 0x61, 0x94, 0xc9,
	0x33, 0x18, 0x5d, 0x41, 0xc9, 0xa5, 0x76, 0xf8, 0x60, 0xb1, 0x95, 0x54, 0xcd, 0x88, 0x84, 0x7f,
	0x6c, 0x49, 0x38, 0x08, 0x7b, 0xc4, 0x95, 0x0b, 0x55, 0x14, 0xaa, 0xf5, 0x08, 0xff, 0x84, 0x82,
	0xf4, 0x99, 0x63, 0x1a, 0x79, 0x24, 0x50, 0xf7, 0xab, 0x4a, 0x3d, 0x6d, 0x1c, 0x0a, 0xf0, 0x9d,
	0xc4, 0x2a, 0x6d, 0x38, 0xd9, 0x9a, 0x0b, 0x95, 0x21, 0xcd, 0x47, 0xa7, 0x08, 0x0d, 0x2f, 0xd1,
	0xaf, 0x90, 0x99, 0xdb, 0x7e, 0xbc, 0x5a, 0x23, 0xd9, 0xbc, 0x48, 0xfd, 0xaf, 0xd4, 0x74, 0xc8,
	0xae, 0xbe, 0x00, 0x2a, 0x41, 0xfe, 0xe9, 0x22, 0x1c, 0x43, 0xe9, 0xda, 0x68, 0xdd, 0xbe, 0xb1,
	0xf4, 0x0f, 0x7a, 0xfb, 0x6e, 0xd8, 0x1d, 0xf4, 0xcb, 0x0a, 0x07, 0xf5, 0xd6, 0xb5, 0x6e, 0x24,
	0xc0, 0x54, 0xf3, 0x9b, 0x02, 0x05, 0xb1, 0xda, 0x3d, 0x2f, 0x62, 0x38, 0xc0, 0x14, 0xbd, 0x04,
	0x30, 0x71, 0x30, 0x16, 0x60, 0x84, 0x8e, 0x36, 0xee, 0x40, 0xe5, 0x74, 0xfb, 0xb5, 0xa8, 0x2b,
	0xff, 0x2a, 0xa8, 0x0d, 0x45, 0x2e, 0xfe, 0x31, 0x90, 0x08, 0x9d, 0xed, 0xfc, 0x38, 0xbb, 0x8c,
	0xd0, 0x5b, 0x28, 0x71, 0x13, 0x93, 0xc4, 0xd4, 0xc1, 0x57, 0x9e, 0x8f, 0x23, 0x74, 0x9e, 0xa4,
	0x8a, 0xfb, 0xe7, 0xe2, 0x24, 0x61, 0x97, 0xd7, 0x65, 0xe7, 0xd3, 0xa5, 0xeb, 0xb1, 0x87, 0x78,
	0xd4, 0x70, 0xc8, 0x4c, 0x0b, 0x30, 0x1b, 0x51, 0xdb, 0x0b, 0x34, 0x36, 0xf9, 0xc7, 0xa5, 0xa1,
	0xa3, 0xb9, 0x44, 0x4b, 0x3c, 0x66, 0x89, 0xd2, 0x25, 0x89, 0xa7, 0x78, 0xb4, 0x2f, 0x9e, 0xb5,
	0xff, 0xbe, 0x07, 0x00, 0x00, 0xff, 0xff, 0x82, 0xcd, 0x55, 0x1e, 0xaa, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventListenerClient is the client API for EventListener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventListenerClient interface {
	// Client(s) can use this RPC method to send the EventListener Event protos.
	// The Event protos can hold information such as:
	//   1) intermediate tensors from a debugged graph being executed, which can
	//      be sent from DebugIdentity ops configured with grpc URLs.
	//   2) GraphDefs of partition graphs, which can be sent from special debug
	//      ops that get executed immediately after the beginning of the graph
	//      execution.
	SendEvents(ctx context.Context, opts ...grpc.CallOption) (EventListener_SendEventsClient, error)
	// Send the tracebacks of a TensorFlow execution call.
	SendTracebacks(ctx context.Context, in *CallTraceback, opts ...grpc.CallOption) (*EventReply, error)
	// Send a collection of source code files being debugged.
	SendSourceFiles(ctx context.Context, in *protobuf.DebuggedSourceFiles, opts ...grpc.CallOption) (*EventReply, error)
}

type eventListenerClient struct {
	cc *grpc.ClientConn
}

func NewEventListenerClient(cc *grpc.ClientConn) EventListenerClient {
	return &eventListenerClient{cc}
}

func (c *eventListenerClient) SendEvents(ctx context.Context, opts ...grpc.CallOption) (EventListener_SendEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventListener_serviceDesc.Streams[0], "/tensorflow.EventListener/SendEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventListenerSendEventsClient{stream}
	return x, nil
}

type EventListener_SendEventsClient interface {
	Send(*util.Event) error
	Recv() (*EventReply, error)
	grpc.ClientStream
}

type eventListenerSendEventsClient struct {
	grpc.ClientStream
}

func (x *eventListenerSendEventsClient) Send(m *util.Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventListenerSendEventsClient) Recv() (*EventReply, error) {
	m := new(EventReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventListenerClient) SendTracebacks(ctx context.Context, in *CallTraceback, opts ...grpc.CallOption) (*EventReply, error) {
	out := new(EventReply)
	err := c.cc.Invoke(ctx, "/tensorflow.EventListener/SendTracebacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventListenerClient) SendSourceFiles(ctx context.Context, in *protobuf.DebuggedSourceFiles, opts ...grpc.CallOption) (*EventReply, error) {
	out := new(EventReply)
	err := c.cc.Invoke(ctx, "/tensorflow.EventListener/SendSourceFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventListenerServer is the server API for EventListener service.
type EventListenerServer interface {
	// Client(s) can use this RPC method to send the EventListener Event protos.
	// The Event protos can hold information such as:
	//   1) intermediate tensors from a debugged graph being executed, which can
	//      be sent from DebugIdentity ops configured with grpc URLs.
	//   2) GraphDefs of partition graphs, which can be sent from special debug
	//      ops that get executed immediately after the beginning of the graph
	//      execution.
	SendEvents(EventListener_SendEventsServer) error
	// Send the tracebacks of a TensorFlow execution call.
	SendTracebacks(context.Context, *CallTraceback) (*EventReply, error)
	// Send a collection of source code files being debugged.
	SendSourceFiles(context.Context, *protobuf.DebuggedSourceFiles) (*EventReply, error)
}

func RegisterEventListenerServer(s *grpc.Server, srv EventListenerServer) {
	s.RegisterService(&_EventListener_serviceDesc, srv)
}

func _EventListener_SendEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventListenerServer).SendEvents(&eventListenerSendEventsServer{stream})
}

type EventListener_SendEventsServer interface {
	Send(*EventReply) error
	Recv() (*util.Event, error)
	grpc.ServerStream
}

type eventListenerSendEventsServer struct {
	grpc.ServerStream
}

func (x *eventListenerSendEventsServer) Send(m *EventReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventListenerSendEventsServer) Recv() (*util.Event, error) {
	m := new(util.Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EventListener_SendTracebacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallTraceback)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventListenerServer).SendTracebacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.EventListener/SendTracebacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventListenerServer).SendTracebacks(ctx, req.(*CallTraceback))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventListener_SendSourceFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.DebuggedSourceFiles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventListenerServer).SendSourceFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.EventListener/SendSourceFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventListenerServer).SendSourceFiles(ctx, req.(*protobuf.DebuggedSourceFiles))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventListener_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tensorflow.EventListener",
	HandlerType: (*EventListenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTracebacks",
			Handler:    _EventListener_SendTracebacks_Handler,
		},
		{
			MethodName: "SendSourceFiles",
			Handler:    _EventListener_SendSourceFiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendEvents",
			Handler:       _EventListener_SendEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tensorflow/core/debug/debug_service.proto",
}
