// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/core/framework/variable.proto

package framework

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Protocol buffer representing a Variable.
type VariableDef struct {
	// Name of the variable tensor.
	VariableName string `protobuf:"bytes,1,opt,name=variable_name,json=variableName,proto3" json:"variable_name,omitempty"`
	// Name of the tensor holding the variable's initial value.
	InitialValueName string `protobuf:"bytes,6,opt,name=initial_value_name,json=initialValueName,proto3" json:"initial_value_name,omitempty"`
	// Name of the initializer op.
	InitializerName string `protobuf:"bytes,2,opt,name=initializer_name,json=initializerName,proto3" json:"initializer_name,omitempty"`
	// Name of the snapshot tensor.
	SnapshotName string `protobuf:"bytes,3,opt,name=snapshot_name,json=snapshotName,proto3" json:"snapshot_name,omitempty"`
	// Support for saving variables as slices of a larger variable.
	SaveSliceInfoDef *SaveSliceInfoDef `protobuf:"bytes,4,opt,name=save_slice_info_def,json=saveSliceInfoDef,proto3" json:"save_slice_info_def,omitempty"`
	// Whether to represent this as a ResourceVariable.
	IsResource bool `protobuf:"varint,5,opt,name=is_resource,json=isResource,proto3" json:"is_resource,omitempty"`
	// Whether this variable should be trained.
	Trainable            bool     `protobuf:"varint,7,opt,name=trainable,proto3" json:"trainable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VariableDef) Reset()         { *m = VariableDef{} }
func (m *VariableDef) String() string { return proto.CompactTextString(m) }
func (*VariableDef) ProtoMessage()    {}
func (*VariableDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_908f2d03adae2778, []int{0}
}

func (m *VariableDef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VariableDef.Unmarshal(m, b)
}
func (m *VariableDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VariableDef.Marshal(b, m, deterministic)
}
func (m *VariableDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VariableDef.Merge(m, src)
}
func (m *VariableDef) XXX_Size() int {
	return xxx_messageInfo_VariableDef.Size(m)
}
func (m *VariableDef) XXX_DiscardUnknown() {
	xxx_messageInfo_VariableDef.DiscardUnknown(m)
}

var xxx_messageInfo_VariableDef proto.InternalMessageInfo

func (m *VariableDef) GetVariableName() string {
	if m != nil {
		return m.VariableName
	}
	return ""
}

func (m *VariableDef) GetInitialValueName() string {
	if m != nil {
		return m.InitialValueName
	}
	return ""
}

func (m *VariableDef) GetInitializerName() string {
	if m != nil {
		return m.InitializerName
	}
	return ""
}

func (m *VariableDef) GetSnapshotName() string {
	if m != nil {
		return m.SnapshotName
	}
	return ""
}

func (m *VariableDef) GetSaveSliceInfoDef() *SaveSliceInfoDef {
	if m != nil {
		return m.SaveSliceInfoDef
	}
	return nil
}

func (m *VariableDef) GetIsResource() bool {
	if m != nil {
		return m.IsResource
	}
	return false
}

func (m *VariableDef) GetTrainable() bool {
	if m != nil {
		return m.Trainable
	}
	return false
}

type SaveSliceInfoDef struct {
	// Name of the full variable of which this is a slice.
	FullName string `protobuf:"bytes,1,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	// Shape of the full variable.
	FullShape []int64 `protobuf:"varint,2,rep,packed,name=full_shape,json=fullShape,proto3" json:"full_shape,omitempty"`
	// Offset of this variable into the full variable.
	VarOffset []int64 `protobuf:"varint,3,rep,packed,name=var_offset,json=varOffset,proto3" json:"var_offset,omitempty"`
	// Shape of this variable.
	VarShape             []int64  `protobuf:"varint,4,rep,packed,name=var_shape,json=varShape,proto3" json:"var_shape,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveSliceInfoDef) Reset()         { *m = SaveSliceInfoDef{} }
func (m *SaveSliceInfoDef) String() string { return proto.CompactTextString(m) }
func (*SaveSliceInfoDef) ProtoMessage()    {}
func (*SaveSliceInfoDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_908f2d03adae2778, []int{1}
}

func (m *SaveSliceInfoDef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveSliceInfoDef.Unmarshal(m, b)
}
func (m *SaveSliceInfoDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveSliceInfoDef.Marshal(b, m, deterministic)
}
func (m *SaveSliceInfoDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveSliceInfoDef.Merge(m, src)
}
func (m *SaveSliceInfoDef) XXX_Size() int {
	return xxx_messageInfo_SaveSliceInfoDef.Size(m)
}
func (m *SaveSliceInfoDef) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveSliceInfoDef.DiscardUnknown(m)
}

var xxx_messageInfo_SaveSliceInfoDef proto.InternalMessageInfo

func (m *SaveSliceInfoDef) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *SaveSliceInfoDef) GetFullShape() []int64 {
	if m != nil {
		return m.FullShape
	}
	return nil
}

func (m *SaveSliceInfoDef) GetVarOffset() []int64 {
	if m != nil {
		return m.VarOffset
	}
	return nil
}

func (m *SaveSliceInfoDef) GetVarShape() []int64 {
	if m != nil {
		return m.VarShape
	}
	return nil
}

func init() {
	proto.RegisterType((*VariableDef)(nil), "tensorflow.VariableDef")
	proto.RegisterType((*SaveSliceInfoDef)(nil), "tensorflow.SaveSliceInfoDef")
}

func init() {
	proto.RegisterFile("tensorflow/core/framework/variable.proto", fileDescriptor_908f2d03adae2778)
}

var fileDescriptor_908f2d03adae2778 = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xd1, 0x0a, 0xd3, 0x30,
	0x14, 0x86, 0xc9, 0x3a, 0xe7, 0x76, 0xe6, 0x74, 0xd4, 0x9b, 0x82, 0x13, 0xc7, 0x76, 0x53, 0x41,
	0x5b, 0xd0, 0x37, 0x18, 0x43, 0x10, 0x41, 0x47, 0x07, 0xbb, 0xf0, 0xa6, 0xa4, 0xf5, 0xa4, 0x0b,
	0xb6, 0x49, 0x49, 0xd2, 0x0e, 0x7c, 0x04, 0x9f, 0xc9, 0x07, 0xf3, 0x52, 0x92, 0xb6, 0xae, 0xec,
	0xae, 0x7c, 0xff, 0x97, 0xa6, 0xe7, 0xf4, 0x87, 0xd0, 0xa0, 0xd0, 0x52, 0xb1, 0x52, 0xde, 0xe2,
	0x5c, 0x2a, 0x8c, 0x99, 0xa2, 0x15, 0xde, 0xa4, 0xfa, 0x19, 0xb7, 0x54, 0x71, 0x9a, 0x95, 0x18,
	0xd5, 0x4a, 0x1a, 0xe9, 0xc3, 0xdd, 0xdc, 0xfd, 0x99, 0xc0, 0xf2, 0xd2, 0xc7, 0x47, 0x64, 0xfe,
	0x1e, 0x56, 0x83, 0x9d, 0x0a, 0x5a, 0x61, 0x40, 0xb6, 0x24, 0x5c, 0x24, 0xcf, 0x06, 0xf8, 0x95,
	0x56, 0xe8, 0xbf, 0x03, 0x9f, 0x0b, 0x6e, 0x38, 0x2d, 0xd3, 0x96, 0x96, 0x4d, 0x6f, 0xce, 0x9c,
	0xb9, 0xee, 0x93, 0x8b, 0x0d, 0x9c, 0xfd, 0x16, 0x06, 0xc6, 0x7f, 0xa1, 0xea, 0xdc, 0x89, 0x73,
	0x5f, 0x8c, 0xb8, 0x53, 0xf7, 0xb0, 0xd2, 0x82, 0xd6, 0xfa, 0x2a, 0x4d, 0xe7, 0x79, 0xdd, 0xed,
	0x03, 0x74, 0xd2, 0x17, 0x78, 0xa9, 0x69, 0x8b, 0xa9, 0x2e, 0x79, 0x8e, 0x29, 0x17, 0x4c, 0xa6,
	0x3f, 0x90, 0x05, 0xd3, 0x2d, 0x09, 0x97, 0x1f, 0x36, 0xd1, 0x7d, 0xb8, 0xe8, 0x4c, 0x5b, 0x3c,
	0x5b, 0xeb, 0xb3, 0x60, 0xf2, 0x88, 0x2c, 0x59, 0xeb, 0x07, 0xe2, 0xbf, 0x81, 0x25, 0xd7, 0xa9,
	0x42, 0x2d, 0x1b, 0x95, 0x63, 0xf0, 0x64, 0x4b, 0xc2, 0x79, 0x02, 0x5c, 0x27, 0x3d, 0xf1, 0x37,
	0xb0, 0x30, 0x8a, 0x72, 0x61, 0x87, 0x0f, 0x9e, 0xba, 0xf8, 0x0e, 0x76, 0xbf, 0x09, 0xac, 0x1f,
	0x6f, 0xf1, 0x5f, 0xc1, 0x82, 0x35, 0x65, 0x39, 0xde, 0xdf, 0xdc, 0x02, 0xf7, 0xf5, 0xaf, 0x01,
	0x5c, 0xa8, 0xaf, 0xb4, 0xb6, 0x7b, 0xf0, 0x42, 0x2f, 0x71, 0xfa, 0xd9, 0x02, 0x1b, 0xb7, 0x54,
	0xa5, 0x92, 0x31, 0x8d, 0x26, 0xf0, 0xba, 0xb8, 0xa5, 0xea, 0x9b, 0x03, 0xf6, 0xd5, 0x36, 0xee,
	0x0e, 0x4f, 0x5d, 0x3a, 0x6f, 0xa9, 0x72, 0x67, 0x0f, 0x37, 0x08, 0xa4, 0x2a, 0xc6, 0x0b, 0xf8,
	0x5f, 0x81, 0xc3, 0xf3, 0xe1, 0x27, 0x9f, 0x6c, 0x05, 0xf4, 0x89, 0x7c, 0xff, 0x54, 0x70, 0x73,
	0x6d, 0xb2, 0x28, 0x97, 0x55, 0x2c, 0xd0, 0x64, 0x76, 0xa6, 0xd8, 0xb0, 0xf7, 0x85, 0xaa, 0xf3,
	0xb8, 0x90, 0xf1, 0xa8, 0x4e, 0xa3, 0xc7, 0x42, 0x3e, 0x94, 0xeb, 0x2f, 0x21, 0xd9, 0xcc, 0xf5,
	0xea, 0xe3, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfd, 0x43, 0x48, 0x26, 0x83, 0x02, 0x00, 0x00,
}
