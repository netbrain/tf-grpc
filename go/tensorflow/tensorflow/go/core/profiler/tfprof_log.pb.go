// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/core/profiler/tfprof_log.proto

package profiler

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	framework "github.com/netbrain/tf-grpc/go/tensorflow/tensorflow/go/core/framework"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// It specifies the Python callstack that creates an op.
type CodeDef struct {
	Traces               []*CodeDef_Trace `protobuf:"bytes,1,rep,name=traces,proto3" json:"traces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CodeDef) Reset()         { *m = CodeDef{} }
func (m *CodeDef) String() string { return proto.CompactTextString(m) }
func (*CodeDef) ProtoMessage()    {}
func (*CodeDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cf3615e51b11da, []int{0}
}

func (m *CodeDef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CodeDef.Unmarshal(m, b)
}
func (m *CodeDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CodeDef.Marshal(b, m, deterministic)
}
func (m *CodeDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodeDef.Merge(m, src)
}
func (m *CodeDef) XXX_Size() int {
	return xxx_messageInfo_CodeDef.Size(m)
}
func (m *CodeDef) XXX_DiscardUnknown() {
	xxx_messageInfo_CodeDef.DiscardUnknown(m)
}

var xxx_messageInfo_CodeDef proto.InternalMessageInfo

func (m *CodeDef) GetTraces() []*CodeDef_Trace {
	if m != nil {
		return m.Traces
	}
	return nil
}

type CodeDef_Trace struct {
	File                 string   `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"` // Deprecated: Do not use.
	FileId               int64    `protobuf:"varint,6,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	Lineno               int32    `protobuf:"varint,2,opt,name=lineno,proto3" json:"lineno,omitempty"`
	Function             string   `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"` // Deprecated: Do not use.
	FunctionId           int64    `protobuf:"varint,7,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	Line                 string   `protobuf:"bytes,4,opt,name=line,proto3" json:"line,omitempty"` // Deprecated: Do not use.
	LineId               int64    `protobuf:"varint,8,opt,name=line_id,json=lineId,proto3" json:"line_id,omitempty"`
	FuncStartLine        int32    `protobuf:"varint,5,opt,name=func_start_line,json=funcStartLine,proto3" json:"func_start_line,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CodeDef_Trace) Reset()         { *m = CodeDef_Trace{} }
func (m *CodeDef_Trace) String() string { return proto.CompactTextString(m) }
func (*CodeDef_Trace) ProtoMessage()    {}
func (*CodeDef_Trace) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cf3615e51b11da, []int{0, 0}
}

func (m *CodeDef_Trace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CodeDef_Trace.Unmarshal(m, b)
}
func (m *CodeDef_Trace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CodeDef_Trace.Marshal(b, m, deterministic)
}
func (m *CodeDef_Trace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodeDef_Trace.Merge(m, src)
}
func (m *CodeDef_Trace) XXX_Size() int {
	return xxx_messageInfo_CodeDef_Trace.Size(m)
}
func (m *CodeDef_Trace) XXX_DiscardUnknown() {
	xxx_messageInfo_CodeDef_Trace.DiscardUnknown(m)
}

var xxx_messageInfo_CodeDef_Trace proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *CodeDef_Trace) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *CodeDef_Trace) GetFileId() int64 {
	if m != nil {
		return m.FileId
	}
	return 0
}

func (m *CodeDef_Trace) GetLineno() int32 {
	if m != nil {
		return m.Lineno
	}
	return 0
}

// Deprecated: Do not use.
func (m *CodeDef_Trace) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *CodeDef_Trace) GetFunctionId() int64 {
	if m != nil {
		return m.FunctionId
	}
	return 0
}

// Deprecated: Do not use.
func (m *CodeDef_Trace) GetLine() string {
	if m != nil {
		return m.Line
	}
	return ""
}

func (m *CodeDef_Trace) GetLineId() int64 {
	if m != nil {
		return m.LineId
	}
	return 0
}

func (m *CodeDef_Trace) GetFuncStartLine() int32 {
	if m != nil {
		return m.FuncStartLine
	}
	return 0
}

type OpLogEntry struct {
	// op name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// float_ops is filled by tfprof Python API when called. It requires the
	// op has RegisterStatistics defined. Currently, Conv2D, MatMul, etc, are
	// implemented.
	FloatOps int64 `protobuf:"varint,2,opt,name=float_ops,json=floatOps,proto3" json:"float_ops,omitempty"`
	// User can define extra op type information for an op. This allows the user
	// to select a group of ops precisely using op_type as a key.
	Types []string `protobuf:"bytes,3,rep,name=types,proto3" json:"types,omitempty"`
	// Used to support tfprof "code" view.
	CodeDef              *CodeDef `protobuf:"bytes,4,opt,name=code_def,json=codeDef,proto3" json:"code_def,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpLogEntry) Reset()         { *m = OpLogEntry{} }
func (m *OpLogEntry) String() string { return proto.CompactTextString(m) }
func (*OpLogEntry) ProtoMessage()    {}
func (*OpLogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cf3615e51b11da, []int{1}
}

func (m *OpLogEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpLogEntry.Unmarshal(m, b)
}
func (m *OpLogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpLogEntry.Marshal(b, m, deterministic)
}
func (m *OpLogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpLogEntry.Merge(m, src)
}
func (m *OpLogEntry) XXX_Size() int {
	return xxx_messageInfo_OpLogEntry.Size(m)
}
func (m *OpLogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_OpLogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_OpLogEntry proto.InternalMessageInfo

func (m *OpLogEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OpLogEntry) GetFloatOps() int64 {
	if m != nil {
		return m.FloatOps
	}
	return 0
}

func (m *OpLogEntry) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *OpLogEntry) GetCodeDef() *CodeDef {
	if m != nil {
		return m.CodeDef
	}
	return nil
}

type OpLogProto struct {
	LogEntries []*OpLogEntry `protobuf:"bytes,1,rep,name=log_entries,json=logEntries,proto3" json:"log_entries,omitempty"`
	// Maps from id of CodeDef file,function,line to its string
	// In the future can also map other id of other fields to string.
	IdToString           map[int64]string `protobuf:"bytes,2,rep,name=id_to_string,json=idToString,proto3" json:"id_to_string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *OpLogProto) Reset()         { *m = OpLogProto{} }
func (m *OpLogProto) String() string { return proto.CompactTextString(m) }
func (*OpLogProto) ProtoMessage()    {}
func (*OpLogProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cf3615e51b11da, []int{2}
}

func (m *OpLogProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpLogProto.Unmarshal(m, b)
}
func (m *OpLogProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpLogProto.Marshal(b, m, deterministic)
}
func (m *OpLogProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpLogProto.Merge(m, src)
}
func (m *OpLogProto) XXX_Size() int {
	return xxx_messageInfo_OpLogProto.Size(m)
}
func (m *OpLogProto) XXX_DiscardUnknown() {
	xxx_messageInfo_OpLogProto.DiscardUnknown(m)
}

var xxx_messageInfo_OpLogProto proto.InternalMessageInfo

func (m *OpLogProto) GetLogEntries() []*OpLogEntry {
	if m != nil {
		return m.LogEntries
	}
	return nil
}

func (m *OpLogProto) GetIdToString() map[int64]string {
	if m != nil {
		return m.IdToString
	}
	return nil
}

// A proto representation of the profiler's profile.
// It allows serialization, shipping around and deserialization of the profiles.
//
// Please don't depend on the internals of the profile proto.
type ProfileProto struct {
	Nodes map[int64]*ProfileNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Whether or not has code traces.
	HasTrace bool `protobuf:"varint,2,opt,name=has_trace,json=hasTrace,proto3" json:"has_trace,omitempty"`
	// Whether or not the TF device tracer fails to return accelerator
	// information (which could lead to 0 accelerator execution time).
	MissAcceleratorStream bool `protobuf:"varint,5,opt,name=miss_accelerator_stream,json=missAcceleratorStream,proto3" json:"miss_accelerator_stream,omitempty"`
	// Traced steps.
	Steps []int64 `protobuf:"varint,3,rep,packed,name=steps,proto3" json:"steps,omitempty"`
	// Maps from id of CodeDef file,function,line to its string
	// In the future can also map other id of other fields to string.
	IdToString           map[int64]string `protobuf:"bytes,4,rep,name=id_to_string,json=idToString,proto3" json:"id_to_string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ProfileProto) Reset()         { *m = ProfileProto{} }
func (m *ProfileProto) String() string { return proto.CompactTextString(m) }
func (*ProfileProto) ProtoMessage()    {}
func (*ProfileProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cf3615e51b11da, []int{3}
}

func (m *ProfileProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProfileProto.Unmarshal(m, b)
}
func (m *ProfileProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProfileProto.Marshal(b, m, deterministic)
}
func (m *ProfileProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileProto.Merge(m, src)
}
func (m *ProfileProto) XXX_Size() int {
	return xxx_messageInfo_ProfileProto.Size(m)
}
func (m *ProfileProto) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileProto.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileProto proto.InternalMessageInfo

func (m *ProfileProto) GetNodes() map[int64]*ProfileNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *ProfileProto) GetHasTrace() bool {
	if m != nil {
		return m.HasTrace
	}
	return false
}

func (m *ProfileProto) GetMissAcceleratorStream() bool {
	if m != nil {
		return m.MissAcceleratorStream
	}
	return false
}

func (m *ProfileProto) GetSteps() []int64 {
	if m != nil {
		return m.Steps
	}
	return nil
}

func (m *ProfileProto) GetIdToString() map[int64]string {
	if m != nil {
		return m.IdToString
	}
	return nil
}

type ProfileNode struct {
	// graph node name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// graph operation type.
	Op string `protobuf:"bytes,9,opt,name=op,proto3" json:"op,omitempty"`
	// A unique id for the node.
	Id           int64            `protobuf:"varint,13,opt,name=id,proto3" json:"id,omitempty"`
	Inputs       map[int32]int64  `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	InputShapes  map[int32]*Tuple `protobuf:"bytes,16,rep,name=input_shapes,json=inputShapes,proto3" json:"input_shapes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Outputs      map[int32]int64  `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	OutputShapes map[int32]*Tuple `protobuf:"bytes,15,rep,name=output_shapes,json=outputShapes,proto3" json:"output_shapes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A map from source node id to its output index to current node.
	SrcOutputIndex       map[int64]int32                 `protobuf:"bytes,14,rep,name=src_output_index,json=srcOutputIndex,proto3" json:"src_output_index,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Shape                []int64                         `protobuf:"varint,4,rep,packed,name=shape,proto3" json:"shape,omitempty"`
	OpTypes              []string                        `protobuf:"bytes,5,rep,name=op_types,json=opTypes,proto3" json:"op_types,omitempty"`
	CanonicalDevice      string                          `protobuf:"bytes,6,opt,name=canonical_device,json=canonicalDevice,proto3" json:"canonical_device,omitempty"`
	HostDevice           string                          `protobuf:"bytes,7,opt,name=host_device,json=hostDevice,proto3" json:"host_device,omitempty"`
	FloatOps             int64                           `protobuf:"varint,8,opt,name=float_ops,json=floatOps,proto3" json:"float_ops,omitempty"`
	Trace                *CodeDef                        `protobuf:"bytes,10,opt,name=trace,proto3" json:"trace,omitempty"`
	Attrs                map[string]*framework.AttrValue `protobuf:"bytes,11,rep,name=attrs,proto3" json:"attrs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Execs                map[int64]*ExecProfile          `protobuf:"bytes,12,rep,name=execs,proto3" json:"execs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *ProfileNode) Reset()         { *m = ProfileNode{} }
func (m *ProfileNode) String() string { return proto.CompactTextString(m) }
func (*ProfileNode) ProtoMessage()    {}
func (*ProfileNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cf3615e51b11da, []int{4}
}

func (m *ProfileNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProfileNode.Unmarshal(m, b)
}
func (m *ProfileNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProfileNode.Marshal(b, m, deterministic)
}
func (m *ProfileNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileNode.Merge(m, src)
}
func (m *ProfileNode) XXX_Size() int {
	return xxx_messageInfo_ProfileNode.Size(m)
}
func (m *ProfileNode) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileNode.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileNode proto.InternalMessageInfo

func (m *ProfileNode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProfileNode) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *ProfileNode) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ProfileNode) GetInputs() map[int32]int64 {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *ProfileNode) GetInputShapes() map[int32]*Tuple {
	if m != nil {
		return m.InputShapes
	}
	return nil
}

func (m *ProfileNode) GetOutputs() map[int32]int64 {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *ProfileNode) GetOutputShapes() map[int32]*Tuple {
	if m != nil {
		return m.OutputShapes
	}
	return nil
}

func (m *ProfileNode) GetSrcOutputIndex() map[int64]int32 {
	if m != nil {
		return m.SrcOutputIndex
	}
	return nil
}

func (m *ProfileNode) GetShape() []int64 {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *ProfileNode) GetOpTypes() []string {
	if m != nil {
		return m.OpTypes
	}
	return nil
}

func (m *ProfileNode) GetCanonicalDevice() string {
	if m != nil {
		return m.CanonicalDevice
	}
	return ""
}

func (m *ProfileNode) GetHostDevice() string {
	if m != nil {
		return m.HostDevice
	}
	return ""
}

func (m *ProfileNode) GetFloatOps() int64 {
	if m != nil {
		return m.FloatOps
	}
	return 0
}

func (m *ProfileNode) GetTrace() *CodeDef {
	if m != nil {
		return m.Trace
	}
	return nil
}

func (m *ProfileNode) GetAttrs() map[string]*framework.AttrValue {
	if m != nil {
		return m.Attrs
	}
	return nil
}

func (m *ProfileNode) GetExecs() map[int64]*ExecProfile {
	if m != nil {
		return m.Execs
	}
	return nil
}

type ExecProfile struct {
	// Can be larger than 1 if run multiple times in loop.
	RunCount int64 `protobuf:"varint,1,opt,name=run_count,json=runCount,proto3" json:"run_count,omitempty"`
	// The earliest/latest time including scheduling and execution.
	AllStartMicros  int64 `protobuf:"varint,2,opt,name=all_start_micros,json=allStartMicros,proto3" json:"all_start_micros,omitempty"`
	LatestEndMicros int64 `protobuf:"varint,3,opt,name=latest_end_micros,json=latestEndMicros,proto3" json:"latest_end_micros,omitempty"`
	// device -> vector of {op_start_micros, op_exec_micros} pairs.
	// accelerator_execs: gpu:id/stream:all -> {op_start_micros, op_exec_micros}
	// For accelerator, vector size can be larger than 1, multiple kernel fires
	// or in tf.while_loop.
	AcceleratorExecs map[string]*ExecTime `protobuf:"bytes,4,rep,name=accelerator_execs,json=acceleratorExecs,proto3" json:"accelerator_execs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// cpu_execs: cpu/gpu:id -> {op_start_micros, op_exec_micros}
	// For cpu, vector size can be larger than 1 if in tf.while_loop.
	CpuExecs map[string]*ExecTime `protobuf:"bytes,5,rep,name=cpu_execs,json=cpuExecs,proto3" json:"cpu_execs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Each entry to memory information of a scheduling of the node.
	// Normally, there will be multiple entries in while_loop.
	MemoryExecs []*ExecMemory `protobuf:"bytes,7,rep,name=memory_execs,json=memoryExecs,proto3" json:"memory_execs,omitempty"`
	// The allocation and deallocation times and sizes throughout execution.
	Allocations []*framework.AllocationRecord `protobuf:"bytes,11,rep,name=allocations,proto3" json:"allocations,omitempty"`
	// The devices related to this execution.
	Devices              []string `protobuf:"bytes,6,rep,name=devices,proto3" json:"devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecProfile) Reset()         { *m = ExecProfile{} }
func (m *ExecProfile) String() string { return proto.CompactTextString(m) }
func (*ExecProfile) ProtoMessage()    {}
func (*ExecProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cf3615e51b11da, []int{5}
}

func (m *ExecProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecProfile.Unmarshal(m, b)
}
func (m *ExecProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecProfile.Marshal(b, m, deterministic)
}
func (m *ExecProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecProfile.Merge(m, src)
}
func (m *ExecProfile) XXX_Size() int {
	return xxx_messageInfo_ExecProfile.Size(m)
}
func (m *ExecProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecProfile.DiscardUnknown(m)
}

var xxx_messageInfo_ExecProfile proto.InternalMessageInfo

func (m *ExecProfile) GetRunCount() int64 {
	if m != nil {
		return m.RunCount
	}
	return 0
}

func (m *ExecProfile) GetAllStartMicros() int64 {
	if m != nil {
		return m.AllStartMicros
	}
	return 0
}

func (m *ExecProfile) GetLatestEndMicros() int64 {
	if m != nil {
		return m.LatestEndMicros
	}
	return 0
}

func (m *ExecProfile) GetAcceleratorExecs() map[string]*ExecTime {
	if m != nil {
		return m.AcceleratorExecs
	}
	return nil
}

func (m *ExecProfile) GetCpuExecs() map[string]*ExecTime {
	if m != nil {
		return m.CpuExecs
	}
	return nil
}

func (m *ExecProfile) GetMemoryExecs() []*ExecMemory {
	if m != nil {
		return m.MemoryExecs
	}
	return nil
}

func (m *ExecProfile) GetAllocations() []*framework.AllocationRecord {
	if m != nil {
		return m.Allocations
	}
	return nil
}

func (m *ExecProfile) GetDevices() []string {
	if m != nil {
		return m.Devices
	}
	return nil
}

type ExecTime struct {
	Times                []*Tuple `protobuf:"bytes,1,rep,name=times,proto3" json:"times,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecTime) Reset()         { *m = ExecTime{} }
func (m *ExecTime) String() string { return proto.CompactTextString(m) }
func (*ExecTime) ProtoMessage()    {}
func (*ExecTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cf3615e51b11da, []int{6}
}

func (m *ExecTime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecTime.Unmarshal(m, b)
}
func (m *ExecTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecTime.Marshal(b, m, deterministic)
}
func (m *ExecTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecTime.Merge(m, src)
}
func (m *ExecTime) XXX_Size() int {
	return xxx_messageInfo_ExecTime.Size(m)
}
func (m *ExecTime) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecTime.DiscardUnknown(m)
}

var xxx_messageInfo_ExecTime proto.InternalMessageInfo

func (m *ExecTime) GetTimes() []*Tuple {
	if m != nil {
		return m.Times
	}
	return nil
}

type ExecMemory struct {
	// This is the timestamp when the memory information was tracked.
	MemoryMicros int64 `protobuf:"varint,1,opt,name=memory_micros,json=memoryMicros,proto3" json:"memory_micros,omitempty"`
	// NOTE: Please don't depend on the following 4 fields yet. Due to
	// TensorFlow internal tracing issues, the numbers can be quite wrong.
	// TODO(xpan): Fix the TensorFlow internal tracing.
	HostTempBytes              int64 `protobuf:"varint,2,opt,name=host_temp_bytes,json=hostTempBytes,proto3" json:"host_temp_bytes,omitempty"`
	HostPersistentBytes        int64 `protobuf:"varint,3,opt,name=host_persistent_bytes,json=hostPersistentBytes,proto3" json:"host_persistent_bytes,omitempty"`
	AcceleratorTempBytes       int64 `protobuf:"varint,4,opt,name=accelerator_temp_bytes,json=acceleratorTempBytes,proto3" json:"accelerator_temp_bytes,omitempty"`
	AcceleratorPersistentBytes int64 `protobuf:"varint,5,opt,name=accelerator_persistent_bytes,json=acceleratorPersistentBytes,proto3" json:"accelerator_persistent_bytes,omitempty"`
	// Total bytes requested by the op.
	RequestedBytes int64 `protobuf:"varint,6,opt,name=requested_bytes,json=requestedBytes,proto3" json:"requested_bytes,omitempty"`
	// Total bytes requested by the op and released before op end.
	PeakBytes int64 `protobuf:"varint,7,opt,name=peak_bytes,json=peakBytes,proto3" json:"peak_bytes,omitempty"`
	// Total bytes requested by the op and not released after op end.
	ResidualBytes int64 `protobuf:"varint,8,opt,name=residual_bytes,json=residualBytes,proto3" json:"residual_bytes,omitempty"`
	// Total bytes output by the op (not necessarily requested by the op).
	OutputBytes int64 `protobuf:"varint,9,opt,name=output_bytes,json=outputBytes,proto3" json:"output_bytes,omitempty"`
	// The total number of bytes currently allocated by the allocator if >0.
	AllocatorBytesInUse int64 `protobuf:"varint,10,opt,name=allocator_bytes_in_use,json=allocatorBytesInUse,proto3" json:"allocator_bytes_in_use,omitempty"`
	// The memory of each output of the operation.
	OutputMemory         map[int32]*Memory `protobuf:"bytes,11,rep,name=output_memory,json=outputMemory,proto3" json:"output_memory,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ExecMemory) Reset()         { *m = ExecMemory{} }
func (m *ExecMemory) String() string { return proto.CompactTextString(m) }
func (*ExecMemory) ProtoMessage()    {}
func (*ExecMemory) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cf3615e51b11da, []int{7}
}

func (m *ExecMemory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecMemory.Unmarshal(m, b)
}
func (m *ExecMemory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecMemory.Marshal(b, m, deterministic)
}
func (m *ExecMemory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecMemory.Merge(m, src)
}
func (m *ExecMemory) XXX_Size() int {
	return xxx_messageInfo_ExecMemory.Size(m)
}
func (m *ExecMemory) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecMemory.DiscardUnknown(m)
}

var xxx_messageInfo_ExecMemory proto.InternalMessageInfo

func (m *ExecMemory) GetMemoryMicros() int64 {
	if m != nil {
		return m.MemoryMicros
	}
	return 0
}

func (m *ExecMemory) GetHostTempBytes() int64 {
	if m != nil {
		return m.HostTempBytes
	}
	return 0
}

func (m *ExecMemory) GetHostPersistentBytes() int64 {
	if m != nil {
		return m.HostPersistentBytes
	}
	return 0
}

func (m *ExecMemory) GetAcceleratorTempBytes() int64 {
	if m != nil {
		return m.AcceleratorTempBytes
	}
	return 0
}

func (m *ExecMemory) GetAcceleratorPersistentBytes() int64 {
	if m != nil {
		return m.AcceleratorPersistentBytes
	}
	return 0
}

func (m *ExecMemory) GetRequestedBytes() int64 {
	if m != nil {
		return m.RequestedBytes
	}
	return 0
}

func (m *ExecMemory) GetPeakBytes() int64 {
	if m != nil {
		return m.PeakBytes
	}
	return 0
}

func (m *ExecMemory) GetResidualBytes() int64 {
	if m != nil {
		return m.ResidualBytes
	}
	return 0
}

func (m *ExecMemory) GetOutputBytes() int64 {
	if m != nil {
		return m.OutputBytes
	}
	return 0
}

func (m *ExecMemory) GetAllocatorBytesInUse() int64 {
	if m != nil {
		return m.AllocatorBytesInUse
	}
	return 0
}

func (m *ExecMemory) GetOutputMemory() map[int32]*Memory {
	if m != nil {
		return m.OutputMemory
	}
	return nil
}

type Tuple struct {
	Int64Values          []int64  `protobuf:"varint,1,rep,packed,name=int64_values,json=int64Values,proto3" json:"int64_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tuple) Reset()         { *m = Tuple{} }
func (m *Tuple) String() string { return proto.CompactTextString(m) }
func (*Tuple) ProtoMessage()    {}
func (*Tuple) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cf3615e51b11da, []int{8}
}

func (m *Tuple) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tuple.Unmarshal(m, b)
}
func (m *Tuple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tuple.Marshal(b, m, deterministic)
}
func (m *Tuple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tuple.Merge(m, src)
}
func (m *Tuple) XXX_Size() int {
	return xxx_messageInfo_Tuple.Size(m)
}
func (m *Tuple) XXX_DiscardUnknown() {
	xxx_messageInfo_Tuple.DiscardUnknown(m)
}

var xxx_messageInfo_Tuple proto.InternalMessageInfo

func (m *Tuple) GetInt64Values() []int64 {
	if m != nil {
		return m.Int64Values
	}
	return nil
}

type Memory struct {
	Bytes                int64    `protobuf:"varint,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Ptr                  uint64   `protobuf:"varint,2,opt,name=ptr,proto3" json:"ptr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Memory) Reset()         { *m = Memory{} }
func (m *Memory) String() string { return proto.CompactTextString(m) }
func (*Memory) ProtoMessage()    {}
func (*Memory) Descriptor() ([]byte, []int) {
	return fileDescriptor_82cf3615e51b11da, []int{9}
}

func (m *Memory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Memory.Unmarshal(m, b)
}
func (m *Memory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Memory.Marshal(b, m, deterministic)
}
func (m *Memory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Memory.Merge(m, src)
}
func (m *Memory) XXX_Size() int {
	return xxx_messageInfo_Memory.Size(m)
}
func (m *Memory) XXX_DiscardUnknown() {
	xxx_messageInfo_Memory.DiscardUnknown(m)
}

var xxx_messageInfo_Memory proto.InternalMessageInfo

func (m *Memory) GetBytes() int64 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

func (m *Memory) GetPtr() uint64 {
	if m != nil {
		return m.Ptr
	}
	return 0
}

func init() {
	proto.RegisterType((*CodeDef)(nil), "tensorflow.tfprof.CodeDef")
	proto.RegisterType((*CodeDef_Trace)(nil), "tensorflow.tfprof.CodeDef.Trace")
	proto.RegisterType((*OpLogEntry)(nil), "tensorflow.tfprof.OpLogEntry")
	proto.RegisterType((*OpLogProto)(nil), "tensorflow.tfprof.OpLogProto")
	proto.RegisterMapType((map[int64]string)(nil), "tensorflow.tfprof.OpLogProto.IdToStringEntry")
	proto.RegisterType((*ProfileProto)(nil), "tensorflow.tfprof.ProfileProto")
	proto.RegisterMapType((map[int64]string)(nil), "tensorflow.tfprof.ProfileProto.IdToStringEntry")
	proto.RegisterMapType((map[int64]*ProfileNode)(nil), "tensorflow.tfprof.ProfileProto.NodesEntry")
	proto.RegisterType((*ProfileNode)(nil), "tensorflow.tfprof.ProfileNode")
	proto.RegisterMapType((map[string]*framework.AttrValue)(nil), "tensorflow.tfprof.ProfileNode.AttrsEntry")
	proto.RegisterMapType((map[int64]*ExecProfile)(nil), "tensorflow.tfprof.ProfileNode.ExecsEntry")
	proto.RegisterMapType((map[int32]*Tuple)(nil), "tensorflow.tfprof.ProfileNode.InputShapesEntry")
	proto.RegisterMapType((map[int32]int64)(nil), "tensorflow.tfprof.ProfileNode.InputsEntry")
	proto.RegisterMapType((map[int32]*Tuple)(nil), "tensorflow.tfprof.ProfileNode.OutputShapesEntry")
	proto.RegisterMapType((map[int32]int64)(nil), "tensorflow.tfprof.ProfileNode.OutputsEntry")
	proto.RegisterMapType((map[int64]int32)(nil), "tensorflow.tfprof.ProfileNode.SrcOutputIndexEntry")
	proto.RegisterType((*ExecProfile)(nil), "tensorflow.tfprof.ExecProfile")
	proto.RegisterMapType((map[string]*ExecTime)(nil), "tensorflow.tfprof.ExecProfile.AcceleratorExecsEntry")
	proto.RegisterMapType((map[string]*ExecTime)(nil), "tensorflow.tfprof.ExecProfile.CpuExecsEntry")
	proto.RegisterType((*ExecTime)(nil), "tensorflow.tfprof.ExecTime")
	proto.RegisterType((*ExecMemory)(nil), "tensorflow.tfprof.ExecMemory")
	proto.RegisterMapType((map[int32]*Memory)(nil), "tensorflow.tfprof.ExecMemory.OutputMemoryEntry")
	proto.RegisterType((*Tuple)(nil), "tensorflow.tfprof.Tuple")
	proto.RegisterType((*Memory)(nil), "tensorflow.tfprof.Memory")
}

func init() {
	proto.RegisterFile("tensorflow/core/profiler/tfprof_log.proto", fileDescriptor_82cf3615e51b11da)
}

var fileDescriptor_82cf3615e51b11da = []byte{
	// 1469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xed, 0x72, 0x13, 0x37,
	0x17, 0x1e, 0x7b, 0xbd, 0xfe, 0x38, 0xce, 0xa7, 0x20, 0x61, 0x31, 0x1f, 0x6f, 0xde, 0x74, 0x4a,
	0x43, 0x28, 0x36, 0x0d, 0x29, 0x43, 0x99, 0x29, 0x85, 0x40, 0xa6, 0x93, 0x19, 0x68, 0xe8, 0x26,
	0x74, 0x28, 0xd3, 0x99, 0xed, 0x66, 0x57, 0x76, 0x76, 0x58, 0xaf, 0xb6, 0x92, 0x16, 0xc8, 0x0d,
	0xf4, 0x47, 0x6f, 0xa4, 0x7f, 0x7b, 0x03, 0xbd, 0x93, 0x5e, 0x41, 0x2f, 0xa2, 0xd3, 0xd1, 0x91,
	0x6c, 0xcb, 0xc6, 0x89, 0x69, 0xcb, 0xaf, 0x95, 0x8e, 0x9e, 0xf3, 0xe8, 0xe8, 0xe8, 0xd1, 0x91,
	0x16, 0xae, 0x4b, 0x9a, 0x09, 0xc6, 0xbb, 0x29, 0x7b, 0xd3, 0x89, 0x18, 0xa7, 0x9d, 0x9c, 0xb3,
	0x6e, 0x92, 0x52, 0xde, 0x91, 0x5d, 0xd5, 0x0c, 0x52, 0xd6, 0x6b, 0xe7, 0x9c, 0x49, 0x46, 0x96,
	0x47, 0xd0, 0xb6, 0x1e, 0x6c, 0x6d, 0x4e, 0x7a, 0x77, 0x79, 0xd8, 0xa7, 0x6f, 0x18, 0x7f, 0xd5,
	0x09, 0xa5, 0xe4, 0xc1, 0xeb, 0x30, 0x2d, 0xa8, 0x76, 0x3f, 0x0b, 0x2b, 0x24, 0xcd, 0x03, 0x21,
	0x43, 0x29, 0x34, 0x76, 0xfd, 0xb7, 0x32, 0xd4, 0x1e, 0xb1, 0x98, 0x3e, 0xa6, 0x5d, 0x72, 0x17,
	0xaa, 0x92, 0x87, 0x11, 0x15, 0x5e, 0x69, 0xcd, 0xd9, 0x68, 0x6e, 0xad, 0xb5, 0xdf, 0x89, 0xa3,
	0x6d, 0xb0, 0xed, 0x43, 0x05, 0xf4, 0x0d, 0xbe, 0xf5, 0x67, 0x09, 0x5c, 0xb4, 0x90, 0x55, 0xa8,
	0xa8, 0x45, 0x79, 0xa5, 0xb5, 0xd2, 0x46, 0x63, 0xa7, 0xec, 0x95, 0x7c, 0xec, 0x93, 0x0b, 0x50,
	0x53, 0xdf, 0x20, 0x89, 0xbd, 0xea, 0x5a, 0x69, 0xc3, 0xf1, 0xab, 0xaa, 0xbb, 0x17, 0x93, 0x55,
	0xa8, 0xa6, 0x49, 0x46, 0x33, 0xe6, 0x95, 0xd7, 0x4a, 0x1b, 0xae, 0x6f, 0x7a, 0xe4, 0x2a, 0xd4,
	0xbb, 0x45, 0x16, 0xc9, 0x84, 0x65, 0x9e, 0x33, 0x24, 0x1b, 0xda, 0xc8, 0xff, 0xa0, 0x39, 0x68,
	0x2b, 0xd2, 0x1a, 0x92, 0xc2, 0xc0, 0x84, 0xc4, 0x15, 0x45, 0xe5, 0x55, 0x46, 0x91, 0xa8, 0xbe,
	0x8a, 0x44, 0x7d, 0x95, 0x53, 0x5d, 0x47, 0xa2, 0xba, 0x7b, 0x31, 0xb9, 0x06, 0x8b, 0xca, 0x5d,
	0xa5, 0x87, 0xcb, 0x00, 0x7d, 0x5d, 0x0c, 0x69, 0x5e, 0x99, 0x0f, 0x94, 0xf5, 0x49, 0x92, 0xd1,
	0xf5, 0x5f, 0x4a, 0x00, 0xfb, 0xf9, 0x13, 0xd6, 0xdb, 0xcd, 0x24, 0x3f, 0x21, 0x04, 0x2a, 0x59,
	0xd8, 0x37, 0x2b, 0xf6, 0xb1, 0x4d, 0x2e, 0x41, 0xa3, 0x9b, 0xb2, 0x50, 0x06, 0x2c, 0x17, 0xb8,
	0x2e, 0xc7, 0xaf, 0xa3, 0x61, 0x3f, 0x17, 0xe4, 0x3c, 0xb8, 0xf2, 0x24, 0xa7, 0xc2, 0x73, 0xd6,
	0x9c, 0x8d, 0x86, 0xaf, 0x3b, 0xe4, 0x73, 0xa8, 0x47, 0x2c, 0xa6, 0x41, 0x4c, 0xbb, 0x18, 0x72,
	0x73, 0xab, 0x75, 0x7a, 0xfa, 0xfd, 0x5a, 0xa4, 0x1b, 0xeb, 0x7f, 0x0c, 0x82, 0x79, 0x86, 0xca,
	0xb9, 0x0f, 0xcd, 0x94, 0xf5, 0x02, 0x9a, 0x49, 0x9e, 0x0c, 0xf7, 0xf1, 0xca, 0x14, 0xa2, 0xd1,
	0x02, 0x7c, 0x48, 0x75, 0x2b, 0xa1, 0x82, 0xec, 0xc3, 0x5c, 0x12, 0x07, 0x92, 0x05, 0x42, 0xf2,
	0x24, 0xeb, 0x79, 0x65, 0x24, 0xb8, 0x79, 0x1a, 0x01, 0x4e, 0xda, 0xde, 0x8b, 0x0f, 0xd9, 0x01,
	0xe2, 0x0d, 0x61, 0x32, 0x34, 0xb4, 0xbe, 0x84, 0xc5, 0x89, 0x61, 0xb2, 0x04, 0xce, 0x2b, 0x7a,
	0x82, 0xf9, 0x72, 0x7c, 0xd5, 0x54, 0x19, 0x41, 0xfd, 0x62, 0xaa, 0x1a, 0xbe, 0xee, 0xdc, 0x2b,
	0xdf, 0x2d, 0xad, 0xff, 0xea, 0xc0, 0xdc, 0x33, 0x7d, 0x4e, 0xf4, 0x02, 0x1f, 0x80, 0x9b, 0xb1,
	0x78, 0xb8, 0xb4, 0xcd, 0x29, 0x91, 0xd9, 0xf8, 0xf6, 0x37, 0x0a, 0xac, 0xc3, 0xd2, 0x8e, 0x6a,
	0x6f, 0x8e, 0x43, 0x11, 0xa0, 0x72, 0x71, 0xc2, 0xba, 0x5f, 0x3f, 0x0e, 0x85, 0x96, 0xef, 0x1d,
	0xb8, 0xd0, 0x4f, 0x84, 0x08, 0xc2, 0x28, 0xa2, 0x29, 0xe5, 0xa1, 0x64, 0x5c, 0xa5, 0x82, 0x86,
	0x7d, 0xd4, 0x42, 0xdd, 0x5f, 0x51, 0xc3, 0x0f, 0x47, 0xa3, 0x07, 0x38, 0xa8, 0x56, 0xa0, 0x8e,
	0x96, 0xde, 0x53, 0xc7, 0xd7, 0x1d, 0xf2, 0xed, 0x44, 0x36, 0x2b, 0x18, 0x73, 0x67, 0x56, 0xcc,
	0x67, 0xe5, 0xf3, 0x05, 0xc0, 0x68, 0x49, 0x53, 0x52, 0xb9, 0x6d, 0xa7, 0xb2, 0xb9, 0x75, 0xf5,
	0xf4, 0xb9, 0x14, 0x8d, 0x95, 0xea, 0xff, 0xba, 0x53, 0xbf, 0x03, 0x34, 0x2d, 0xe6, 0xa9, 0xc7,
	0x62, 0x01, 0xca, 0x2c, 0xf7, 0x1a, 0x68, 0x29, 0xb3, 0x5c, 0xf5, 0x93, 0xd8, 0x9b, 0x47, 0xfa,
	0x72, 0x12, 0x93, 0x1d, 0xa8, 0x26, 0x59, 0x5e, 0x48, 0x61, 0x74, 0xb7, 0x79, 0x76, 0xf4, 0xed,
	0x3d, 0x04, 0xeb, 0x24, 0x19, 0x4f, 0xe2, 0xc3, 0x1c, 0xb6, 0x02, 0x71, 0x1c, 0xaa, 0x43, 0xb6,
	0x34, 0x2b, 0xe7, 0x23, 0xa6, 0x03, 0xf4, 0xd0, 0x74, 0xcd, 0x64, 0x64, 0x21, 0xbb, 0x50, 0x63,
	0x85, 0xc4, 0xc0, 0x1c, 0xa4, 0xbb, 0x31, 0x83, 0x6e, 0x5f, 0xa3, 0x35, 0xd5, 0xc0, 0x97, 0x3c,
	0x87, 0x79, 0xdd, 0x1c, 0xc4, 0xb6, 0x88, 0x64, 0xb7, 0xde, 0x8b, 0xcc, 0x0e, 0x6e, 0x8e, 0x59,
	0x26, 0xf2, 0x03, 0x2c, 0x09, 0x1e, 0x05, 0x86, 0x3a, 0xc9, 0x62, 0xfa, 0xd6, 0x5b, 0x40, 0xe6,
	0xad, 0x19, 0xcc, 0x07, 0x3c, 0xd2, 0xe4, 0x7b, 0xca, 0x49, 0x73, 0x2f, 0x88, 0x31, 0x23, 0x2a,
	0x5b, 0xcd, 0x83, 0xe2, 0x55, 0xca, 0x56, 0x1d, 0x72, 0x11, 0xea, 0x2c, 0x0f, 0x74, 0x19, 0x73,
	0xb1, 0x8c, 0xd5, 0x58, 0x7e, 0x88, 0x85, 0xec, 0x3a, 0x2c, 0x45, 0x61, 0xc6, 0xb2, 0x24, 0x0a,
	0xd3, 0x20, 0xa6, 0xaf, 0x93, 0x88, 0x62, 0xc9, 0x6f, 0xf8, 0x8b, 0x43, 0xfb, 0x63, 0x34, 0xab,
	0x1a, 0x7e, 0xcc, 0x84, 0x1c, 0xa0, 0x6a, 0x88, 0x02, 0x65, 0x32, 0x80, 0xb1, 0x3a, 0x5a, 0x9f,
	0xa8, 0xa3, 0xb7, 0xc0, 0xd5, 0x87, 0x18, 0x66, 0x96, 0x4b, 0x0d, 0x24, 0x5f, 0x81, 0xab, 0x2e,
	0x4b, 0xe1, 0x35, 0x31, 0x3d, 0xd7, 0x67, 0xa4, 0xe7, 0xa1, 0xc2, 0x9a, 0xda, 0x81, 0x7e, 0x8a,
	0x80, 0xbe, 0xa5, 0x91, 0xf0, 0xe6, 0xde, 0x8b, 0x60, 0x57, 0x61, 0x0d, 0x01, 0xfa, 0xb5, 0xbe,
	0x80, 0xa6, 0x25, 0x5a, 0xfb, 0x80, 0xb9, 0x53, 0x0e, 0x98, 0x63, 0x9f, 0xcf, 0x17, 0xb0, 0x34,
	0xa9, 0xd2, 0x29, 0xfe, 0xed, 0xf1, 0xf3, 0xef, 0x4d, 0x89, 0xf0, 0xb0, 0xc8, 0xd3, 0xb1, 0x93,
	0x7f, 0x0f, 0xe6, 0x6c, 0xc1, 0xfe, 0xa3, 0xa8, 0xbe, 0x87, 0xe5, 0x77, 0xf4, 0xf9, 0x81, 0xc2,
	0x7a, 0x08, 0xe7, 0xa6, 0x08, 0x74, 0x56, 0x51, 0x72, 0x6d, 0x8a, 0x7d, 0x80, 0xd1, 0x26, 0xda,
	0x9e, 0x0d, 0xed, 0x79, 0x63, 0x3c, 0xac, 0x15, 0x3b, 0x2c, 0xe5, 0xf8, 0x9d, 0x1a, 0x1c, 0xdf,
	0x04, 0x18, 0x6d, 0xea, 0xbf, 0x2b, 0xbf, 0xca, 0xdf, 0x88, 0xc4, 0xae, 0x9f, 0x3f, 0xbb, 0xd0,
	0xb4, 0x86, 0x94, 0xf4, 0x79, 0x91, 0x05, 0x11, 0x2b, 0x32, 0x69, 0x66, 0xa8, 0xf3, 0x22, 0x7b,
	0xa4, 0xfa, 0x64, 0x03, 0x96, 0xc2, 0x34, 0x35, 0x2f, 0x95, 0x7e, 0x12, 0x71, 0x36, 0x78, 0x66,
	0x2c, 0x84, 0x69, 0x8a, 0x4f, 0x95, 0xa7, 0x68, 0x25, 0x9b, 0xb0, 0x9c, 0x86, 0x92, 0x0a, 0x19,
	0xd0, 0x2c, 0x1e, 0x40, 0x1d, 0x84, 0x2e, 0xea, 0x81, 0xdd, 0x2c, 0x36, 0xd8, 0x10, 0x96, 0xed,
	0x7b, 0x4f, 0x2b, 0x5d, 0xdf, 0x59, 0xdb, 0x67, 0x2f, 0xa4, 0x6d, 0xdd, 0x88, 0x96, 0xe8, 0x97,
	0xc2, 0x09, 0x33, 0xd9, 0x83, 0x46, 0x94, 0x17, 0x86, 0xda, 0x45, 0xea, 0x4f, 0x67, 0x50, 0x3f,
	0xca, 0x0b, 0x8b, 0xb2, 0x1e, 0x99, 0x2e, 0x79, 0x00, 0x73, 0x7d, 0xda, 0x67, 0xfc, 0xc4, 0xb0,
	0xd5, 0x4e, 0x7d, 0xeb, 0x28, 0xfc, 0x53, 0x84, 0xfa, 0x4d, 0xed, 0xa2, 0x19, 0xee, 0x43, 0x33,
	0x4c, 0x53, 0x16, 0x85, 0xea, 0xc5, 0x38, 0x28, 0x0a, 0x97, 0xc7, 0x34, 0x30, 0x1c, 0xf6, 0x69,
	0xc4, 0x78, 0xec, 0xdb, 0x0e, 0xc4, 0x83, 0x9a, 0xae, 0x5c, 0xc2, 0xab, 0xea, 0x1a, 0x68, 0xba,
	0xad, 0x1f, 0x61, 0x65, 0x6a, 0x46, 0xa6, 0x48, 0xf0, 0xb3, 0x71, 0xc5, 0x5c, 0x3a, 0x25, 0xfe,
	0xc3, 0xa4, 0x3f, 0x21, 0xc4, 0xf9, 0xb1, 0xc4, 0x7c, 0x30, 0xe6, 0xf5, 0x7b, 0x50, 0x1f, 0x98,
	0xd5, 0xb1, 0x95, 0x49, 0x7f, 0xf8, 0xda, 0x3a, 0xe3, 0xd8, 0x22, 0x6c, 0xfd, 0xaf, 0x8a, 0x3e,
	0x1f, 0x3a, 0xdb, 0xe4, 0x23, 0x98, 0x37, 0x5b, 0x64, 0x84, 0xa7, 0x75, 0x6c, 0xf6, 0xcd, 0xa8,
	0xee, 0x1a, 0x2c, 0xe2, 0x25, 0x20, 0x69, 0x3f, 0x0f, 0x8e, 0x4e, 0x24, 0x1d, 0x48, 0x79, 0x5e,
	0x99, 0x0f, 0x69, 0x3f, 0xdf, 0x51, 0x46, 0xb2, 0x05, 0x2b, 0x88, 0xcb, 0x29, 0x17, 0x89, 0x90,
	0x34, 0x93, 0x06, 0xad, 0xd5, 0x7c, 0x4e, 0x0d, 0x3e, 0x1b, 0x8e, 0x69, 0x9f, 0x6d, 0x58, 0xb5,
	0x15, 0x6d, 0x4d, 0x51, 0x41, 0xa7, 0xf3, 0xd6, 0xe8, 0x68, 0xa6, 0x07, 0x70, 0xd9, 0xf6, 0x7a,
	0x67, 0x42, 0x17, 0x7d, 0x5b, 0x16, 0x66, 0x72, 0xde, 0x4f, 0x60, 0x91, 0xd3, 0x9f, 0x0a, 0x2a,
	0x24, 0x8d, 0x8d, 0x93, 0xfe, 0xeb, 0x59, 0x18, 0x9a, 0x35, 0xf0, 0x0a, 0x40, 0x4e, 0xc3, 0x57,
	0x06, 0xa3, 0x7f, 0x62, 0x1a, 0xca, 0xa2, 0x87, 0x3f, 0x86, 0x05, 0x4e, 0x45, 0x12, 0x17, 0x61,
	0x6a, 0x20, 0xfa, 0x12, 0x9c, 0x1f, 0x58, 0x35, 0xec, 0xff, 0x60, 0x5e, 0x04, 0x06, 0xd4, 0x40,
	0x50, 0x53, 0xdb, 0x34, 0xe4, 0x36, 0xac, 0x1a, 0xe9, 0x32, 0xae, 0x51, 0x41, 0x92, 0x05, 0x85,
	0xd0, 0xb7, 0xa7, 0xe3, 0x9f, 0x1b, 0x8e, 0x22, 0x7e, 0x2f, 0x7b, 0x2e, 0x28, 0x39, 0x1c, 0x3e,
	0x58, 0xf4, 0x8e, 0x99, 0x23, 0xd2, 0x39, 0xf3, 0x8c, 0x99, 0xf7, 0x8a, 0xee, 0x8c, 0xbd, 0x57,
	0xb4, 0xa9, 0xf5, 0x72, 0x70, 0x65, 0x58, 0x90, 0x29, 0x57, 0x46, 0x67, 0x5c, 0xbe, 0x17, 0xa7,
	0x4c, 0x6a, 0x0e, 0xb5, 0x25, 0xde, 0x4d, 0x70, 0x51, 0x90, 0x2a, 0x25, 0x49, 0x26, 0xef, 0x6c,
	0xeb, 0x1f, 0x63, 0x2d, 0x60, 0x47, 0xbd, 0xea, 0xe4, 0x9d, 0x6d, 0xac, 0xea, 0x62, 0xfd, 0x16,
	0x54, 0x8d, 0x4e, 0xcf, 0x83, 0xab, 0x13, 0xa7, 0xf5, 0xa9, 0x3b, 0x2a, 0xa4, 0x5c, 0x72, 0x9c,
	0xbe, 0xe2, 0xab, 0xe6, 0xce, 0xd7, 0x2f, 0x77, 0x7b, 0x89, 0x3c, 0x2e, 0x8e, 0xda, 0x11, 0xeb,
	0x77, 0x32, 0x2a, 0x8f, 0x78, 0x98, 0x64, 0x1d, 0xd9, 0xbd, 0xd9, 0xe3, 0x79, 0xd4, 0xe9, 0xb1,
	0x8e, 0xf5, 0xe7, 0x6d, 0x35, 0x7b, 0x6c, 0xfc, 0x8f, 0xff, 0xa8, 0x8a, 0x3f, 0xdf, 0xb7, 0xff,
	0x0e, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x48, 0xb2, 0xaa, 0x14, 0x10, 0x00, 0x00,
}
